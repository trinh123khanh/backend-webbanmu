package com.example.backend.service;

// T·∫°m th·ªùi comment Apache POI imports ƒë·ªÉ tr√°nh l·ªói compile
// import org.apache.poi.ss.usermodel.*;
// import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.stereotype.Service;

import java.io.IOException;
import java.util.Base64;
import java.util.List;
import java.util.Map;

@Service
public class ExcelExportService {

    public String exportPhieuGiamGiaToExcel(List<Map<String, Object>> data) throws IOException {
        // T·∫°m th·ªùi return empty string thay v√¨ t·∫°o Excel
        // TODO: Uncomment khi Apache POI ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng
        /*
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Phi·∫øu Gi·∫£m Gi√°");

        // T·∫°o header style
        CellStyle headerStyle = workbook.createCellStyle();
        Font headerFont = workbook.createFont();
        headerFont.setBold(true);
        headerFont.setFontHeightInPoints((short) 12);
        headerStyle.setFont(headerFont);
        headerStyle.setFillForegroundColor(IndexedColors.LIGHT_BLUE.getIndex());
        headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
        headerStyle.setBorderBottom(BorderStyle.THIN);
        headerStyle.setBorderTop(BorderStyle.THIN);
        headerStyle.setBorderRight(BorderStyle.THIN);
        headerStyle.setBorderLeft(BorderStyle.THIN);

        // T·∫°o data style
        CellStyle dataStyle = workbook.createCellStyle();
        dataStyle.setBorderBottom(BorderStyle.THIN);
        dataStyle.setBorderTop(BorderStyle.THIN);
        dataStyle.setBorderRight(BorderStyle.THIN);
        dataStyle.setBorderLeft(BorderStyle.THIN);

        // T·∫°o header row
        Row headerRow = sheet.createRow(0);
        String[] headers = {
            "STT", "M√£ Phi·∫øu", "T√™n Phi·∫øu", "Lo·∫°i Phi·∫øu", "Gi√° Tr·ªã Gi·∫£m",
            "Gi√° Tr·ªã T·ªëi Thi·ªÉu", "S·ªë Ti·ªÅn T·ªëi ƒêa", "H√≥a ƒê∆°n T·ªëi Thi·ªÉu",
            "S·ªë L∆∞·ª£ng", "Tr·∫°ng Th√°i", "Ng√†y B·∫Øt ƒê·∫ßu", "Ng√†y K·∫øt Th√∫c",
            "Ng√†y T·∫°o", "Ng√†y C·∫≠p Nh·∫≠t"
        };

        for (int i = 0; i < headers.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headers[i]);
            cell.setCellStyle(headerStyle);
        }

        // T·∫°o data rows
        int rowNum = 1;
        for (Map<String, Object> rowData : data) {
            Row row = sheet.createRow(rowNum++);
            
            int colNum = 0;
            for (String header : headers) {
                Cell cell = row.createCell(colNum++);
                Object value = rowData.get(header);
                
                if (value != null) {
                    if (value instanceof Number) {
                        cell.setCellValue(((Number) value).doubleValue());
                    } else {
                        cell.setCellValue(value.toString());
                    }
                } else {
                    cell.setCellValue("");
                }
                cell.setCellStyle(dataStyle);
            }
        }

        // Auto-size columns
        for (int i = 0; i < headers.length; i++) {
            sheet.autoSizeColumn(i);
        }

        // Convert to byte array
        ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
        workbook.write(outputStream);
        workbook.close();

        // Convert to base64
        byte[] excelBytes = outputStream.toByteArray();
        return Base64.getEncoder().encodeToString(excelBytes);
        */
        
        // T·∫°m th·ªùi return empty string
        System.out.println("üìä Excel Export Service - Simulated export for " + data.size() + " records");
        return Base64.getEncoder().encodeToString("Excel export simulated".getBytes());
    }
}
