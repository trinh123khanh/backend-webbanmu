package com.example.backend.service;

import com.example.backend.dto.ApiResponse;
import com.example.backend.dto.PhieuGiamGiaCaNhanRequest;
import com.example.backend.dto.PhieuGiamGiaCaNhanResponse;
import com.example.backend.entity.PhieuGiamGiaCaNhan;
import com.example.backend.repository.PhieuGiamGiaCaNhanRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.ArrayList;

@Service
@RequiredArgsConstructor
@Slf4j
public class PhieuGiamGiaCaNhanService {
    
    private final PhieuGiamGiaCaNhanRepository phieuGiamGiaCaNhanRepository;
    
    /**
     * T·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n cho m·ªôt kh√°ch h√†ng
     */
    @Transactional
    public PhieuGiamGiaCaNhan createPhieuGiamGiaCaNhan(Long phieuGiamGiaId, Long khachHangId) {
        try {
            log.info("T·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n cho phi·∫øu ID: {} v√† kh√°ch h√†ng ID: {}", phieuGiamGiaId, khachHangId);
            
            // Validate input
            if (phieuGiamGiaId == null || phieuGiamGiaId <= 0) {
                throw new IllegalArgumentException("ID phi·∫øu gi·∫£m gi√° kh√¥ng h·ª£p l·ªá: " + phieuGiamGiaId);
            }
            if (khachHangId == null || khachHangId <= 0) {
                throw new IllegalArgumentException("ID kh√°ch h√†ng kh√¥ng h·ª£p l·ªá: " + khachHangId);
            }
            
            // Ki·ªÉm tra xem kh√°ch h√†ng ƒë√£ c√≥ phi·∫øu gi·∫£m gi√° n√†y ch∆∞a
            if (phieuGiamGiaCaNhanRepository.existsByKhachHangIdAndPhieuGiamGiaId(khachHangId, phieuGiamGiaId)) {
                log.warn("Kh√°ch h√†ng ID: {} ƒë√£ c√≥ phi·∫øu gi·∫£m gi√° ID: {}", khachHangId, phieuGiamGiaId);
                throw new RuntimeException("Kh√°ch h√†ng ƒë√£ c√≥ phi·∫øu gi·∫£m gi√° n√†y");
            }
            
            PhieuGiamGiaCaNhan entity = PhieuGiamGiaCaNhan.builder()
                    .phieuGiamGiaId(phieuGiamGiaId)
                    .khachHangId(khachHangId)
                    .build();
            
            PhieuGiamGiaCaNhan savedEntity = phieuGiamGiaCaNhanRepository.save(entity);
            
            log.info("T·∫°o th√†nh c√¥ng phi·∫øu gi·∫£m gi√° c√° nh√¢n ID: {}", savedEntity.getId());
            
            return savedEntity;
            
        } catch (Exception e) {
            log.error("L·ªói khi t·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n", e);
            throw new RuntimeException("L·ªói khi t·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * T·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n cho nhi·ªÅu kh√°ch h√†ng
     */
    @Transactional
    public List<PhieuGiamGiaCaNhan> createPhieuGiamGiaCaNhanForMultipleCustomers(Long phieuGiamGiaId, List<Long> khachHangIds) {
        try {
            log.info("T·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n cho phi·∫øu ID: {} v√† {} kh√°ch h√†ng: {}", 
                    phieuGiamGiaId, khachHangIds.size(), khachHangIds);
            
            List<PhieuGiamGiaCaNhan> createdEntities = new ArrayList<>();
            List<String> errors = new ArrayList<>();
            
            for (Long khachHangId : khachHangIds) {
                try {
                    log.info("ƒêang t·∫°o phi·∫øu c√° nh√¢n cho kh√°ch h√†ng ID: {} v·ªõi phi·∫øu gi·∫£m gi√° ID: {}", 
                            khachHangId, phieuGiamGiaId);
                    
                    PhieuGiamGiaCaNhan createdEntity = createPhieuGiamGiaCaNhan(phieuGiamGiaId, khachHangId);
                    createdEntities.add(createdEntity);
                    
                    log.info("‚úÖ T·∫°o th√†nh c√¥ng phi·∫øu c√° nh√¢n ID: {} cho kh√°ch h√†ng ID: {}", 
                            createdEntity.getId(), khachHangId);
                    
                } catch (Exception e) {
                    String errorMsg = String.format("L·ªói khi t·∫°o phi·∫øu c√° nh√¢n cho kh√°ch h√†ng ID %d: %s", 
                            khachHangId, e.getMessage());
                    errors.add(errorMsg);
                    log.error("‚ùå {}", errorMsg, e);
                }
            }
            
            if (!errors.isEmpty()) {
                String allErrors = String.join("; ", errors);
                log.error("C√≥ {} l·ªói khi t·∫°o phi·∫øu c√° nh√¢n: {}", errors.size(), allErrors);
                throw new RuntimeException("L·ªói khi t·∫°o phi·∫øu c√° nh√¢n cho m·ªôt s·ªë kh√°ch h√†ng: " + allErrors);
            }
            
            log.info("üéâ T·∫°o th√†nh c√¥ng {} phi·∫øu gi·∫£m gi√° c√° nh√¢n cho {} kh√°ch h√†ng", 
                    createdEntities.size(), khachHangIds.size());
            
            return createdEntities;
            
        } catch (Exception e) {
            log.error("L·ªói khi t·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n cho nhi·ªÅu kh√°ch h√†ng", e);
            throw new RuntimeException("L·ªói khi t·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * L·∫•y t·∫•t c·∫£ phi·∫øu gi·∫£m gi√° c√° nh√¢n theo phi·∫øu gi·∫£m gi√°
     */
    public List<PhieuGiamGiaCaNhan> getPhieuGiamGiaCaNhanByPhieuGiamGiaId(Long phieuGiamGiaId) {
        try {
            log.info("L·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo phi·∫øu ID: {}", phieuGiamGiaId);
            
            List<PhieuGiamGiaCaNhan> entities = phieuGiamGiaCaNhanRepository.findByPhieuGiamGiaIdWithDetails(phieuGiamGiaId);
            
            log.info("L·∫•y th√†nh c√¥ng {} phi·∫øu gi·∫£m gi√° c√° nh√¢n", entities.size());
            
            return entities;
            
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo phi·∫øu ID: {}", phieuGiamGiaId, e);
            throw new RuntimeException("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * L·∫•y t·∫•t c·∫£ phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng
     */
    public List<PhieuGiamGiaCaNhan> getPhieuGiamGiaCaNhanByKhachHangId(Long khachHangId) {
        try {
            log.info("L·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng ID: {}", khachHangId);
            
            List<PhieuGiamGiaCaNhan> entities = phieuGiamGiaCaNhanRepository.findByKhachHangId(khachHangId);
            
            log.info("L·∫•y th√†nh c√¥ng {} phi·∫øu gi·∫£m gi√° c√° nh√¢n", entities.size());
            
            return entities;
            
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng ID: {}", khachHangId, e);
            throw new RuntimeException("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * X√≥a t·∫•t c·∫£ phi·∫øu gi·∫£m gi√° c√° nh√¢n theo phi·∫øu gi·∫£m gi√°
     */
    @Transactional
    public void deletePhieuGiamGiaCaNhanByPhieuGiamGiaId(Long phieuGiamGiaId) {
        try {
            log.info("X√≥a phi·∫øu gi·∫£m gi√° c√° nh√¢n theo phi·∫øu ID: {}", phieuGiamGiaId);
            
            phieuGiamGiaCaNhanRepository.deleteByPhieuGiamGiaId(phieuGiamGiaId);
            
            log.info("X√≥a th√†nh c√¥ng phi·∫øu gi·∫£m gi√° c√° nh√¢n theo phi·∫øu ID: {}", phieuGiamGiaId);
            
        } catch (Exception e) {
            log.error("L·ªói khi x√≥a phi·∫øu gi·∫£m gi√° c√° nh√¢n theo phi·∫øu ID: {}", phieuGiamGiaId, e);
            throw new RuntimeException("L·ªói khi x√≥a phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * ƒê·∫øm s·ªë phi·∫øu gi·∫£m gi√° c√° nh√¢n theo phi·∫øu gi·∫£m gi√°
     */
    public Long countPhieuGiamGiaCaNhanByPhieuGiamGiaId(Long phieuGiamGiaId) {
        try {
            return phieuGiamGiaCaNhanRepository.countByPhieuGiamGiaId(phieuGiamGiaId);
        } catch (Exception e) {
            log.error("L·ªói khi ƒë·∫øm phi·∫øu gi·∫£m gi√° c√° nh√¢n theo phi·∫øu ID: {}", phieuGiamGiaId, e);
            return 0L;
        }
    }
    
    /**
     * ƒê·∫øm s·ªë phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng
     */
    public Long countPhieuGiamGiaCaNhanByKhachHangId(Long khachHangId) {
        try {
            return phieuGiamGiaCaNhanRepository.countByKhachHangId(khachHangId);
        } catch (Exception e) {
            log.error("L·ªói khi ƒë·∫øm phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng ID: {}", khachHangId, e);
            return 0L;
        }
    }
    
    // ========== C√ÅC METHOD CHO CONTROLLER ==========
    
    /**
     * L·∫•y t·∫•t c·∫£ phi·∫øu gi·∫£m gi√° c√° nh√¢n
     */
    public ApiResponse<List<PhieuGiamGiaCaNhanResponse>> getAllPhieuGiamGiaCaNhan() {
        try {
            log.info("L·∫•y t·∫•t c·∫£ phi·∫øu gi·∫£m gi√° c√° nh√¢n");
            
            List<PhieuGiamGiaCaNhan> entities = phieuGiamGiaCaNhanRepository.findAll();
            List<PhieuGiamGiaCaNhanResponse> responses = entities.stream()
                    .map(this::convertToResponse)
                    .collect(Collectors.toList());
            
            log.info("L·∫•y th√†nh c√¥ng {} phi·∫øu gi·∫£m gi√° c√° nh√¢n", responses.size());
            
            return ApiResponse.success("L·∫•y danh s√°ch phi·∫øu gi·∫£m gi√° c√° nh√¢n th√†nh c√¥ng", responses);
            
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y t·∫•t c·∫£ phi·∫øu gi·∫£m gi√° c√° nh√¢n", e);
            return ApiResponse.error("L·ªói khi l·∫•y danh s√°ch phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * L·∫•y t·∫•t c·∫£ phi·∫øu gi·∫£m gi√° c√° nh√¢n v·ªõi ph√¢n trang
     */
    public ApiResponse<Page<PhieuGiamGiaCaNhanResponse>> getAllPhieuGiamGiaCaNhanWithPagination(int page, int size) {
        try {
            log.info("L·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n v·ªõi ph√¢n trang - Page: {}, Size: {}", page, size);
            
            Pageable pageable = PageRequest.of(page, size);
            Page<PhieuGiamGiaCaNhan> entityPage = phieuGiamGiaCaNhanRepository.findAll(pageable);
            
            Page<PhieuGiamGiaCaNhanResponse> responsePage = entityPage.map(this::convertToResponse);
            
            log.info("L·∫•y th√†nh c√¥ng {} phi·∫øu gi·∫£m gi√° c√° nh√¢n v·ªõi ph√¢n trang", responsePage.getContent().size());
            
            return ApiResponse.success("L·∫•y danh s√°ch phi·∫øu gi·∫£m gi√° c√° nh√¢n v·ªõi ph√¢n trang th√†nh c√¥ng", responsePage);
            
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n v·ªõi ph√¢n trang", e);
            return ApiResponse.error("L·ªói khi l·∫•y danh s√°ch phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * L·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo ID
     */
    public ApiResponse<PhieuGiamGiaCaNhanResponse> getPhieuGiamGiaCaNhanById(Long id) {
        try {
            log.info("L·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo ID: {}", id);
            
            PhieuGiamGiaCaNhan entity = phieuGiamGiaCaNhanRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n v·ªõi ID: " + id));
            
            PhieuGiamGiaCaNhanResponse response = convertToResponse(entity);
            
            log.info("L·∫•y th√†nh c√¥ng phi·∫øu gi·∫£m gi√° c√° nh√¢n ID: {}", id);
            
            return ApiResponse.success("L·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n th√†nh c√¥ng", response);
            
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo ID: {}", id, e);
            return ApiResponse.error("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * L·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng
     */
    public ApiResponse<List<PhieuGiamGiaCaNhanResponse>> getPhieuGiamGiaCaNhanByKhachHang(Long khachHangId) {
        try {
            log.info("L·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng ID: {}", khachHangId);
            
            List<PhieuGiamGiaCaNhan> entities = phieuGiamGiaCaNhanRepository.findByKhachHangId(khachHangId);
            List<PhieuGiamGiaCaNhanResponse> responses = entities.stream()
                    .map(this::convertToResponse)
                    .collect(Collectors.toList());
            
            log.info("L·∫•y th√†nh c√¥ng {} phi·∫øu gi·∫£m gi√° c√° nh√¢n cho kh√°ch h√†ng ID: {}", responses.size(), khachHangId);
            
            return ApiResponse.success("L·∫•y danh s√°ch phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng th√†nh c√¥ng", responses);
            
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng ID: {}", khachHangId, e);
            return ApiResponse.error("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng: " + e.getMessage());
        }
    }
    
    /**
     * L·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng v·ªõi ph√¢n trang
     */
    public ApiResponse<Page<PhieuGiamGiaCaNhanResponse>> getPhieuGiamGiaCaNhanByKhachHangWithPagination(Long khachHangId, int page, int size) {
        try {
            log.info("L·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng ID: {} v·ªõi ph√¢n trang - Page: {}, Size: {}", khachHangId, page, size);
            
            Pageable pageable = PageRequest.of(page, size);
            Page<PhieuGiamGiaCaNhan> entityPage = phieuGiamGiaCaNhanRepository.findByKhachHangId(khachHangId, pageable);
            
            Page<PhieuGiamGiaCaNhanResponse> responsePage = entityPage.map(this::convertToResponse);
            
            log.info("L·∫•y th√†nh c√¥ng {} phi·∫øu gi·∫£m gi√° c√° nh√¢n cho kh√°ch h√†ng ID: {} v·ªõi ph√¢n trang", 
                    responsePage.getContent().size(), khachHangId);
            
            return ApiResponse.success("L·∫•y danh s√°ch phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng v·ªõi ph√¢n trang th√†nh c√¥ng", responsePage);
            
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng ID: {} v·ªõi ph√¢n trang", khachHangId, e);
            return ApiResponse.error("L·ªói khi l·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng: " + e.getMessage());
        }
    }
    
    /**
     * T·∫°o m·ªõi phi·∫øu gi·∫£m gi√° c√° nh√¢n t·ª´ Request
     */
    public ApiResponse<PhieuGiamGiaCaNhanResponse> createPhieuGiamGiaCaNhan(PhieuGiamGiaCaNhanRequest request) {
        try {
            log.info("T·∫°o m·ªõi phi·∫øu gi·∫£m gi√° c√° nh√¢n t·ª´ request cho kh√°ch h√†ng ID: {}, phi·∫øu gi·∫£m gi√° ID: {}", 
                    request.getKhachHangId(), request.getPhieuGiamGiaId());
            
            // S·ª≠ d·ª•ng method c√≥ s·∫µn v·ªõi 2 parameters
            PhieuGiamGiaCaNhan entity = createPhieuGiamGiaCaNhan(request.getPhieuGiamGiaId(), request.getKhachHangId());
            PhieuGiamGiaCaNhanResponse response = convertToResponse(entity);
            
            log.info("T·∫°o th√†nh c√¥ng phi·∫øu gi·∫£m gi√° c√° nh√¢n ID: {}", entity.getId());
            
            return ApiResponse.success("T·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n th√†nh c√¥ng", response);
            
        } catch (Exception e) {
            log.error("L·ªói khi t·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n t·ª´ request", e);
            return ApiResponse.error("L·ªói khi t·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t phi·∫øu gi·∫£m gi√° c√° nh√¢n
     */
    public ApiResponse<PhieuGiamGiaCaNhanResponse> updatePhieuGiamGiaCaNhan(Long id, PhieuGiamGiaCaNhanRequest request) {
        try {
            log.info("C·∫≠p nh·∫≠t phi·∫øu gi·∫£m gi√° c√° nh√¢n ID: {}", id);
            
            PhieuGiamGiaCaNhan entity = phieuGiamGiaCaNhanRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n v·ªõi ID: " + id));
            
            // C·∫≠p nh·∫≠t th√¥ng tin
            entity.setKhachHangId(request.getKhachHangId());
            entity.setPhieuGiamGiaId(request.getPhieuGiamGiaId());
            
            PhieuGiamGiaCaNhan savedEntity = phieuGiamGiaCaNhanRepository.save(entity);
            PhieuGiamGiaCaNhanResponse response = convertToResponse(savedEntity);
            
            log.info("C·∫≠p nh·∫≠t th√†nh c√¥ng phi·∫øu gi·∫£m gi√° c√° nh√¢n ID: {}", id);
            
            return ApiResponse.success("C·∫≠p nh·∫≠t phi·∫øu gi·∫£m gi√° c√° nh√¢n th√†nh c√¥ng", response);
            
        } catch (Exception e) {
            log.error("L·ªói khi c·∫≠p nh·∫≠t phi·∫øu gi·∫£m gi√° c√° nh√¢n ID: {}", id, e);
            return ApiResponse.error("L·ªói khi c·∫≠p nh·∫≠t phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * X√≥a phi·∫øu gi·∫£m gi√° c√° nh√¢n theo ID
     */
    public ApiResponse<Void> deletePhieuGiamGiaCaNhan(Long id) {
        try {
            log.info("X√≥a phi·∫øu gi·∫£m gi√° c√° nh√¢n ID: {}", id);
            
            PhieuGiamGiaCaNhan entity = phieuGiamGiaCaNhanRepository.findById(id)
                    .orElseThrow(() -> new RuntimeException("Kh√¥ng t√¨m th·∫•y phi·∫øu gi·∫£m gi√° c√° nh√¢n v·ªõi ID: " + id));
            
            phieuGiamGiaCaNhanRepository.delete(entity);
            
            log.info("X√≥a th√†nh c√¥ng phi·∫øu gi·∫£m gi√° c√° nh√¢n ID: {}", id);
            
            return ApiResponse.success("X√≥a phi·∫øu gi·∫£m gi√° c√° nh√¢n th√†nh c√¥ng", null);
            
        } catch (Exception e) {
            log.error("L·ªói khi x√≥a phi·∫øu gi·∫£m gi√° c√° nh√¢n ID: {}", id, e);
            return ApiResponse.error("L·ªói khi x√≥a phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * L·∫•y th·ªëng k√™ phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng
     */
    public ApiResponse<Object> getStatisticsByKhachHang(Long khachHangId) {
        try {
            log.info("L·∫•y th·ªëng k√™ phi·∫øu gi·∫£m gi√° c√° nh√¢n cho kh√°ch h√†ng ID: {}", khachHangId);
            
            Long totalCount = countPhieuGiamGiaCaNhanByKhachHangId(khachHangId);
            
            Map<String, Object> statistics = Map.of(
                    "khachHangId", khachHangId,
                    "totalPhieuGiamGiaCaNhan", totalCount,
                    "message", "Th·ªëng k√™ phi·∫øu gi·∫£m gi√° c√° nh√¢n theo kh√°ch h√†ng"
            );
            
            log.info("L·∫•y th√†nh c√¥ng th·ªëng k√™ cho kh√°ch h√†ng ID: {}, t·ªïng s·ªë phi·∫øu: {}", khachHangId, totalCount);
            
            return ApiResponse.success("L·∫•y th·ªëng k√™ phi·∫øu gi·∫£m gi√° c√° nh√¢n th√†nh c√¥ng", statistics);
            
        } catch (Exception e) {
            log.error("L·ªói khi l·∫•y th·ªëng k√™ phi·∫øu gi·∫£m gi√° c√° nh√¢n cho kh√°ch h√†ng ID: {}", khachHangId, e);
            return ApiResponse.error("L·ªói khi l·∫•y th·ªëng k√™ phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * T·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n v·ªõi th√¥ng tin chi ti·∫øt v√† validation ƒë·∫ßy ƒë·ªß
     */
    @Transactional
    public ApiResponse<List<PhieuGiamGiaCaNhanResponse>> createPersonalVouchersWithDetails(
            Long phieuGiamGiaId, List<Long> khachHangIds) {
        try {
            log.info("üöÄ B·∫Øt ƒë·∫ßu t·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n cho phi·∫øu ID: {} v√† {} kh√°ch h√†ng", 
                    phieuGiamGiaId, khachHangIds.size());
            
            // Validate input
            if (phieuGiamGiaId == null || phieuGiamGiaId <= 0) {
                return ApiResponse.error("ID phi·∫øu gi·∫£m gi√° kh√¥ng h·ª£p l·ªá");
            }
            if (khachHangIds == null || khachHangIds.isEmpty()) {
                return ApiResponse.error("Danh s√°ch kh√°ch h√†ng kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
            }
            
            // T·∫°o phi·∫øu c√° nh√¢n cho t·ª´ng kh√°ch h√†ng
            List<PhieuGiamGiaCaNhan> createdEntities = createPhieuGiamGiaCaNhanForMultipleCustomers(phieuGiamGiaId, khachHangIds);
            
            // Convert to response
            List<PhieuGiamGiaCaNhanResponse> responses = createdEntities.stream()
                    .map(this::convertToResponse)
                    .collect(Collectors.toList());
            
            log.info("‚úÖ Ho√†n th√†nh t·∫°o {} phi·∫øu gi·∫£m gi√° c√° nh√¢n", responses.size());
            
            return ApiResponse.success(
                    String.format("T·∫°o th√†nh c√¥ng %d phi·∫øu gi·∫£m gi√° c√° nh√¢n cho %d kh√°ch h√†ng", 
                            responses.size(), khachHangIds.size()), 
                    responses);
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi t·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n v·ªõi th√¥ng tin chi ti·∫øt", e);
            return ApiResponse.error("L·ªói khi t·∫°o phi·∫øu gi·∫£m gi√° c√° nh√¢n: " + e.getMessage());
        }
    }
    
    /**
     * C·∫≠p nh·∫≠t to√†n b·ªô kh√°ch h√†ng cho m·ªôt phi·∫øu gi·∫£m gi√°
     * X√≥a t·∫•t c·∫£ customer c≈© v√† th√™m customer m·ªõi
     */
    @Transactional
    public ApiResponse<List<PhieuGiamGiaCaNhanResponse>> updateCustomersForPhieu(Long phieuGiamGiaId, List<Long> khachHangIds) {
        try {
            log.info("üîÑ C·∫≠p nh·∫≠t kh√°ch h√†ng cho phi·∫øu gi·∫£m gi√° ID: {} v·ªõi {} kh√°ch h√†ng m·ªõi", 
                    phieuGiamGiaId, khachHangIds != null ? khachHangIds.size() : 0);
            
            // Validate input
            if (phieuGiamGiaId == null || phieuGiamGiaId <= 0) {
                return ApiResponse.error("ID phi·∫øu gi·∫£m gi√° kh√¥ng h·ª£p l·ªá");
            }
            
            // B∆∞·ªõc 1: X√≥a t·∫•t c·∫£ kh√°ch h√†ng c≈©
            log.info("üóëÔ∏è X√≥a t·∫•t c·∫£ kh√°ch h√†ng c≈© cho phi·∫øu ID: {}", phieuGiamGiaId);
            deletePhieuGiamGiaCaNhanByPhieuGiamGiaId(phieuGiamGiaId);
            log.info("‚úÖ ƒê√£ x√≥a t·∫•t c·∫£ kh√°ch h√†ng c≈©");
            
            // B∆∞·ªõc 2: Th√™m kh√°ch h√†ng m·ªõi (n·∫øu c√≥)
            List<PhieuGiamGiaCaNhanResponse> responses = new ArrayList<>();
            
            if (khachHangIds != null && !khachHangIds.isEmpty()) {
                log.info("‚ûï Th√™m {} kh√°ch h√†ng m·ªõi", khachHangIds.size());
                List<PhieuGiamGiaCaNhan> createdEntities = createPhieuGiamGiaCaNhanForMultipleCustomers(phieuGiamGiaId, khachHangIds);
                
                responses = createdEntities.stream()
                        .map(this::convertToResponse)
                        .collect(Collectors.toList());
                
                log.info("‚úÖ ƒê√£ th√™m {} kh√°ch h√†ng m·ªõi th√†nh c√¥ng", responses.size());
            } else {
                log.info("‚ÑπÔ∏è Kh√¥ng c√≥ kh√°ch h√†ng m·ªõi ƒë·ªÉ th√™m");
            }
            
            log.info("üéâ Ho√†n th√†nh c·∫≠p nh·∫≠t kh√°ch h√†ng cho phi·∫øu ID: {}", phieuGiamGiaId);
            
            return ApiResponse.success(
                    String.format("C·∫≠p nh·∫≠t th√†nh c√¥ng %d kh√°ch h√†ng cho phi·∫øu gi·∫£m gi√°", responses.size()), 
                    responses);
            
        } catch (Exception e) {
            log.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t kh√°ch h√†ng cho phi·∫øu ID: {}", phieuGiamGiaId, e);
            return ApiResponse.error("L·ªói khi c·∫≠p nh·∫≠t kh√°ch h√†ng: " + e.getMessage());
        }
    }
    
    /**
     * Chuy·ªÉn ƒë·ªïi Entity sang Response DTO
     */
    private PhieuGiamGiaCaNhanResponse convertToResponse(PhieuGiamGiaCaNhan entity) {
        return PhieuGiamGiaCaNhanResponse.builder()
                .id(entity.getId())
                .khachHangId(entity.getKhachHangId())
                .phieuGiamGiaId(entity.getPhieuGiamGiaId())
                .trangThai("Ch∆∞a s·ª≠ d·ª•ng") // Default value v√¨ Entity kh√¥ng c√≥ field n√†y
                .soLanDaDung(0) // Default value v√¨ Entity kh√¥ng c√≥ field n√†y
                // C√°c th√¥ng tin li√™n quan c√≥ th·ªÉ ƒë∆∞·ª£c populate t·ª´ c√°c service kh√°c
                .tenKhachHang("Kh√°ch h√†ng " + entity.getKhachHangId()) // Placeholder
                .tenPhieuGiamGia("Phi·∫øu gi·∫£m gi√° " + entity.getPhieuGiamGiaId()) // Placeholder
                .maPhieuGiamGia("PGG" + entity.getPhieuGiamGiaId()) // Placeholder
                .giaTriGiam(0.0) // Placeholder
                .loaiPhieuGiamGia(false) // Placeholder
                .loaiPhieuGiamGiaText("Ph·∫ßn trƒÉm") // Placeholder
                .build();
    }
}